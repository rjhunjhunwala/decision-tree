/**
 * Twenty Questions AI engine
 * 
*/
package twenytquestions;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.Scanner;

/**
 *
 * @author Rohan Jhunjhunwala
 *
 */
public class TwenytQuestions {

	/**
	 * this decision tree is in groups of four for each node the first one is the
	 * actual payload and data to display the second part is the question that
	 * comes before it the third part is the answer to that question which comes
	 * before it the fourth part is whether its a question or answer
	 */
	static String[] decisionTree = getWordsFromFile("dataBank.txt");
	//pointer to keep track of place in string
	static int pointer = 0;
	//the last question
	static String lastQuestion = "starting";
	//last user answer is "null" s/he hasnt answered anything
	static String userAnswer = "null";
	//what the right answer is
	static String userThoughtOf;
	//the difference between computer guess and what the user thinks of
	static String difference;
/**
	* 
	* @param fileName the file name to get the length of
	* @return the length (in lines of the file)
	*/
	public static int getLengthOfFile(String fileName) {
		int length = 0;
		try {
			File textFile = new File(fileName);
			Scanner sc = new Scanner(textFile);
			while (sc.hasNextLine()) {
				sc.nextLine();
				length++;
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e);
		}
		return length;
	}

	/**
	 *
	 * @param fileName file Name to get a String[] delineated by lines
	 * @return a string[] of the stuff from the file
	 */
	public static String[] getWordsFromFile(String fileName) {
		String[] wordBank = new String[getLengthOfFile(fileName)];
		int i = 0;
		try {
			File textFile = new File(fileName);
			Scanner sc = new Scanner(textFile);
			int lengthOfFile = getLengthOfFile(fileName);
			for (i = 0; i <lengthOfFile ; i++) {
				wordBank[i] = sc.nextLine();
			}
			return wordBank;
		} catch (Exception e) {
			System.out.println("Exception: " + e);
		}
		return null;
	}

	/**
	 * Writes stuff to a file
	 *
	 * @param stuff is a string[] of stuff for the file
	 * @param fileName is the fileName
	 */
	public static void writeStuffToFile(String fileName, String[] stuff) {
		BufferedWriter output = null;
		try {
			File aFile = new File(fileName);
			FileWriter myWriter = new FileWriter(aFile);
			output = new BufferedWriter(myWriter);
			for (int i = 0; i < stuff.length; i++) {
				output.write(stuff[i]);
				output.newLine();
			}
			output.close();
		} catch (Exception e) {
			System.out.println("Exception: " + e);
		}
	}

	/**
	 * gets a string from the user
	 *
	 * @param Prompt prompt for user
	 * @return a string the user types
	 */
	public static String getStringFromUser(String Prompt) {
		System.out.println(Prompt);
		Scanner sc = new Scanner(System.in);
		return (sc.nextLine());
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String[] args) {
		System.out.println("I know " + findAnimals() + " Animals");
		System.out.println("Think of any living thing I will try to guess it");
		twentyQuestions();
	}

	/**
	 * THe main body of its question asking
	 */
	public static void twentyQuestions() {
		boolean done = false;
		while (!done) {
			for (int i = 1; i < decisionTree.length; i += 4) {
				if (lastQuestion.equals(decisionTree[i])
												&& userAnswer.equalsIgnoreCase(decisionTree[i + 1])) {
					if (decisionTree[i + 2].equalsIgnoreCase("question")) {
						userAnswer = getStringFromUser(decisionTree[pointer] + "?");
						userAnswer = getYesNo();
						lastQuestion = decisionTree[pointer];
						pointer = 0;
						i = 1;
					} else {
						String userDesire = getStringFromUser("Is it a " + decisionTree[pointer]);
						done = true;
						if ("yes".equalsIgnoreCase(userDesire)) {
							lastQuestion = "starting";
							userAnswer = "null";
							break;
						} else {
							done = true;
doLearning();
							break;
						}

					}
				}
				pointer += 4;
			}
		}
		resetValues();
	}

	/**
	 * resets the program to starting values and asks user if s/he wants to play
	 * again
	 */
	private static void resetValues() {
		pointer = 0;
		userAnswer = "null";
		lastQuestion = "starting";
		userThoughtOf = null;
		difference = null;
		System.out.println("It was fun playing with you");
		if (getStringFromUser("Do you want to play again").equals("yes")) {
			twentyQuestions();
		}
	}

	/**
	 *
	 * @return the number of animals known
	 */
	private static String findAnimals() {
		int animalsKnown = 0;
		for (String a : decisionTree) {
			if (a.equalsIgnoreCase("answer")) {
				animalsKnown++;
			}
		}
		return animalsKnown + "";
	}
/**
	* gets a string yes or no from the user
	* @return yes or no  
	*/
	private static String getYesNo() {
		while (!userAnswer.equals("yes") && !userAnswer.equals("no")) {
			userAnswer
											= getStringFromUser("Please respond only with yes or no\n"
																			+ "answer again");
		}
		return userAnswer;
	}
/**
	* updates decision tree to reflect new information learned
	*/
	private static void doLearning() {
							userThoughtOf = getStringFromUser("Sorry you win tell me what did "
															+ "you think of?");
							difference = getStringFromUser("What does a " + userThoughtOf + ""
															+ " have which a " + decisionTree[pointer] + " does not?");
							decisionTree[pointer + 1] = "Does it have " + difference;
							decisionTree[pointer + 2] = "no";
							String[] tempData = new String[decisionTree.length + 8];
							System.arraycopy(decisionTree, 0, tempData, 0, decisionTree.length);
							tempData[decisionTree.length] = "Does it have " + difference;
							tempData[decisionTree.length + 1] = lastQuestion;
							tempData[decisionTree.length + 2] = userAnswer;
							tempData[decisionTree.length + 3] = "question";
							tempData[decisionTree.length + 4] = userThoughtOf;
							tempData[decisionTree.length + 5] = "Does it have " + difference;
							tempData[decisionTree.length + 6] = "yes";
							tempData[decisionTree.length + 7] = "answer";
							decisionTree = tempData;
							writeStuffToFile("dataBank.txt", decisionTree);
							lastQuestion = "starting";
							userAnswer = "null";
	}
}
